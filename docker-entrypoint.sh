#!/bin/bash
# ============================================================================
# üê≥ DOCKER ENTRYPOINT - REDIS INFRASTRUCTURE
# ============================================================================
#
# Script de inicializa√ß√£o personalizado para Redis Infrastructure
# Contexto: Cache distribu√≠do com dados sens√≠veis (Redis 8.2.1)
# - Valida√ß√µes espec√≠ficas para Redis 8.2.1
# - Health checks para cache distribu√≠do
# - Configura√ß√£o de memory limits e persistence
# - Cluster validation e sentinel support
# - Performance monitoring e optimization
# - Network connectivity validation
# - Backup e recovery validation
#
# Uso: Configurar no Dockerfile como ENTRYPOINT
# ============================================================================

set -euo pipefail

# ============================================================================
# üìã CONFIGURA√á√ÉO ESPEC√çFICA DO REDIS
# ============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] [REDIS]${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] [REDIS] ERROR:${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] [REDIS] SUCCESS:${NC} $1"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] [REDIS] WARNING:${NC} $1"
}

# ============================================================================
# üîß VALIDA√á√ÉO DE AMBIENTE - REDIS ESPEC√çFICO
# ============================================================================

log "üöÄ Iniciando valida√ß√£o de ambiente - Redis Infrastructure..."

# Verificar se estamos rodando como usu√°rio correto
if [[ "$(id -u)" -eq 0 ]]; then
    warning "Executando como root - isso pode ser inseguro em produ√ß√£o"
fi

# Vari√°veis obrigat√≥rias espec√≠ficas do Redis
required_vars=(
    "REDIS_PASSWORD"
    "REDIS_PORT"
    "REDIS_DATABASES"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [[ -z "${!var:-}" ]]; then
        missing_vars+=("$var")
    fi
done

if [[ ${#missing_vars[@]} -gt 0 ]]; then
    error "Vari√°veis de ambiente obrigat√≥rias n√£o definidas para Redis:"
    for var in "${missing_vars[@]}"; do
        error "  - $var"
    fi
    exit 1
fi

# Valida√ß√µes espec√≠ficas do Redis
if [[ "$REDIS_PORT" != "6379" ]]; then
    warning "Porta do Redis diferente do padr√£o: $REDIS_PORT (esperado: 6379)"
fi

# Validar complexidade da senha Redis
if [[ -n "${REDIS_PASSWORD:-}" ]]; then
    if [[ ${#REDIS_PASSWORD} -lt 8 ]]; then
        error "‚ùå Senha do Redis muito curta (m√≠nimo 8 caracteres)"
        exit 1
    fi
    success "‚úÖ Complexidade da senha Redis validada"
fi

success "‚úÖ Valida√ß√£o de ambiente conclu√≠da - Redis Infrastructure"

# ============================================================================
# üîê VALIDA√á√ÉO DE MEM√ìRIA E RECURSOS - REDIS
# ============================================================================

log "üîç Validando aloca√ß√£o de mem√≥ria para Redis..."

# Verificar mem√≥ria total dispon√≠vel
TOTAL_MEMORY=$(free -m | awk 'NR==2 {print $2}')
REDIS_RECOMMENDED_MEMORY=1024  # 1GB recomendado para Redis

if [[ $TOTAL_MEMORY -lt $REDIS_RECOMMENDED_MEMORY ]]; then
    warning "‚ö†Ô∏è Mem√≥ria limitada para Redis: ${TOTAL_MEMORY}MB (recomendado: ${REDIS_RECOMMENDED_MEMORY}MB)"
else
    success "‚úÖ Mem√≥ria suficiente para Redis: ${TOTAL_MEMORY}MB"
fi

# Verificar se h√° configura√ß√£o de maxmemory
if [[ -n "${REDIS_MAXMEMORY:-}" ]]; then
    log "‚ÑπÔ∏è Redis MaxMemory configurado: $REDIS_MAXMEMORY"
    # Validar se maxmemory n√£o excede mem√≥ria dispon√≠vel
    if [[ $REDIS_MAXMEMORY =~ ^[0-9]+$ ]]; then
        if [[ $REDIS_MAXMEMORY -gt $((TOTAL_MEMORY * 1024 * 1024)) ]]; then
            warning "‚ö†Ô∏è Redis MaxMemory ($REDIS_MAXMEMORY bytes) excede mem√≥ria dispon√≠vel"
        fi
    fi
fi

# ============================================================================
# üíæ VALIDA√á√ÉO DE STORAGE E PERSISTENCE
# ============================================================================

log "üîç Validando storage e persistence..."

# Verificar se h√° espa√ßo suficiente no disco para RDB/AOF
DISK_THRESHOLD_MB=512  # 512MB m√≠nimo para Redis
AVAILABLE_SPACE=$(df /data | awk 'NR==2 {print $4}')
AVAILABLE_MB=$((AVAILABLE_SPACE / 1024))

if [[ $AVAILABLE_MB -lt $DISK_THRESHOLD_MB ]]; then
    warning "‚ö†Ô∏è Espa√ßo em disco limitado para Redis: ${AVAILABLE_MB}MB (recomendado: ${DISK_THRESHOLD_MB}MB)"
else
    success "‚úÖ Espa√ßo em disco suficiente para Redis: ${AVAILABLE_MB}MB"
fi

# Verificar configura√ß√£o de persistence
if [[ -n "${REDIS_SAVE:-}" ]]; then
    log "‚ÑπÔ∏è Redis persistence configurada: $REDIS_SAVE"
fi

if [[ -n "${REDIS_APPENDONLY:-}" ]]; then
    log "‚ÑπÔ∏è Redis AOF configurado: $REDIS_APPENDONLY"
    if [[ "$REDIS_APPENDONLY" == "yes" ]]; then
        success "‚úÖ Redis AOF habilitado para durabilidade"
    fi
fi

# ============================================================================
# üåê VALIDA√á√ÉO DE CONECTIVIDADE - NETWORK
# ============================================================================

log "üîç Validando conectividade de rede..."

# Verificar se Docker est√° dispon√≠vel
if ! docker info >/dev/null 2>&1; then
    error "‚ùå Docker n√£o est√° dispon√≠vel ou n√£o est√° rodando"
    exit 1
fi

# Verificar se Docker Swarm est√° ativo
if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
    warning "‚ö†Ô∏è Docker Swarm n√£o est√° ativo - inicializando..."
    if ! docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') 2>/dev/null; then
        log "‚ÑπÔ∏è Docker Swarm pode j√° estar inicializado ou n√£o √© poss√≠vel inicializar"
    fi
fi

success "‚úÖ Docker e Docker Swarm dispon√≠veis"

# ============================================================================
# üîÑ VALIDA√á√ÉO DE CLUSTER/SENTINEL
# ============================================================================

log "üîç Validando configura√ß√£o de cluster/sentinel..."

# Verificar se h√° configura√ß√£o de cluster
if [[ -n "${REDIS_CLUSTER_ENABLED:-}" ]]; then
    if [[ "$REDIS_CLUSTER_ENABLED" == "yes" ]]; then
        log "üîç Configura√ß√£o de cluster detectada"

        if [[ -z "${REDIS_CLUSTER_NODES:-}" ]]; then
            error "‚ùå Cluster habilitado mas REDIS_CLUSTER_NODES n√£o configurado"
            exit 1
        fi

        success "‚úÖ Configura√ß√£o de cluster validada"
    fi
fi

# Verificar se h√° configura√ß√£o de sentinel
if [[ -n "${REDIS_SENTINEL_ENABLED:-}" ]]; then
    if [[ "$REDIS_SENTINEL_ENABLED" == "yes" ]]; then
        log "üîç Configura√ß√£o de sentinel detectada"

        if [[ -z "${REDIS_SENTINEL_MASTER:-}" ]]; then
            error "‚ùå Sentinel habilitado mas REDIS_SENTINEL_MASTER n√£o configurado"
            exit 1
        fi

        success "‚úÖ Configura√ß√£o de sentinel validada"
    fi
fi

# ============================================================================
# üè• VALIDA√á√ÉO DE HEALTH CHECKS - REDIS
# ============================================================================

log "üè• Validando health checks espec√≠ficos do Redis..."

# Verificar se o Redis pode inicializar
if command -v redis-cli --version >/dev/null 2>&1; then
    REDIS_VERSION=$(redis-cli --version | awk '{print $2}')
    log "‚ÑπÔ∏è Vers√£o do Redis CLI: $REDIS_VERSION"
else
    log "‚ÑπÔ∏è Redis CLI n√£o encontrado no container"
fi

# Verificar se h√° processos Redis rodando
if pgrep -f redis-server >/dev/null 2>&1; then
    warning "‚ö†Ô∏è Redis j√° est√° rodando - verificando se √© uma reinicializa√ß√£o"
else
    success "‚úÖ Nenhum processo Redis anterior detectado"
fi

# Validar configura√ß√£o de maxclients
if [[ -n "${REDIS_MAXCLIENTS:-}" ]]; then
    log "‚ÑπÔ∏è Redis MaxClients configurado: $REDIS_MAXCLIENTS"
fi

# ============================================================================
# üìä VALIDA√á√ÉO DE PERFORMANCE
# ============================================================================

log "üìä Validando configura√ß√µes de performance..."

# Verificar se h√° configura√ß√£o de I/O threads
if [[ -n "${REDIS_IO_THREADS:-}" ]]; then
    log "‚ÑπÔ∏è Redis IO Threads configurado: $REDIS_IO_THREADS"
fi

# Verificar se h√° configura√ß√£o de lazyfree
if [[ -n "${REDIS_LAZYFREE_LAZY_EVICTION:-}" ]]; then
    log "‚ÑπÔ∏è Redis Lazy Free configurado: $REDIS_LAZYFREE_LAZY_EVICTION"
fi

# Validar configura√ß√£o de TCP keepalive
if [[ -n "${REDIS_TCP_KEEPALIVE:-}" ]]; then
    log "‚ÑπÔ∏è Redis TCP Keepalive configurado: $REDIS_TCP_KEEPALIVE"
fi

# ============================================================================
# üîê VALIDA√á√ÉO DE SEGURAN√áA
# ============================================================================

log "üîê Validando configura√ß√µes de seguran√ßa..."

# Verificar se protected mode est√° habilitado
if [[ -n "${REDIS_PROTECTED_MODE:-}" ]]; then
    if [[ "$REDIS_PROTECTED_MODE" == "yes" ]]; then
        success "‚úÖ Redis Protected Mode habilitado"
    fi
fi

# Verificar se rename commands est√£o configurados
if [[ -n "${REDIS_RENAME_COMMANDS:-}" ]]; then
    log "‚ÑπÔ∏è Redis Rename Commands configurado"
    success "‚úÖ Comandos perigosos protegidos"
fi

# Validar configura√ß√£o de bind
if [[ -n "${REDIS_BIND:-}" ]]; then
    log "‚ÑπÔ∏è Redis BIND configurado: $REDIS_BIND"
fi

# ============================================================================
# üìã INFORMA√á√ïES DO AMBIENTE - REDIS
# ============================================================================

log "üìã Informa√ß√µes do ambiente - Redis Infrastructure:"
echo "  - Service: Conex√£o de Sorte - Redis Infrastructure"
echo "  - Version: ${REDIS_VERSION:-8.2.1}"
echo "  - Profile: ${REDIS_PROFILE:-default}"
echo "  - Server Port: $REDIS_PORT (Padr√£o: 6379)"
echo "  - Databases: $REDIS_DATABASES"
echo "  - Memory Total: ${TOTAL_MEMORY}MB"
echo "  - Disk Space: ${AVAILABLE_MB}MB"
echo "  - MaxMemory: ${REDIS_MAXMEMORY:-N√£o configurado}"
echo "  - Persistence: ${REDIS_SAVE:-N√£o configurado}"
echo "  - AOF: ${REDIS_APPENDONLY:-N√£o configurado}"
echo "  - Cluster: ${REDIS_CLUSTER_ENABLED:-N√£o configurado}"
echo "  - Sentinel: ${REDIS_SENTINEL_ENABLED:-N√£o configurado}"
echo "  - Health Endpoint: redis://localhost:$REDIS_PORT"

# ============================================================================
# üèÉ EXECU√á√ÉO DA APLICA√á√ÉO - REDIS
# ============================================================================

log "üèÉ Iniciando Redis Infrastructure..."

# Executar aplica√ß√£o com exec para permitir signal handling
exec "$@"
