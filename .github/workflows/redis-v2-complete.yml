name: üî¥ Redis V2 Complete Pipeline (WORKING)

on:
  push:
    branches: [ main ]
    paths: ['docker-compose.yml', 'scripts/**', '.github/workflows/**', 'README.md']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production, staging]

permissions:
  contents: read
  id-token: write

env:
  SERVICE_NAME: conexao-de-sorte-redis-infraestrutura
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  validate-redis-v2:
    runs-on: ubuntu-latest  # VALIDATED: Works correctly
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4.3.0

      - name: üîê Azure Login (OIDC) - VALIDATED WORKING
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ‚úÖ Validate Azure connectivity
        run: |
          echo "üîó Testing Azure connectivity..."
          az account show --output table
          echo "‚úÖ Azure OIDC working with secrets.AZURE_* pattern"

      - name: üîç Validate Redis V2 Security Configuration
        run: |
          echo "üîç Validating Redis V2 security fixes..."

          # Check docker-compose.yml exists
          if [[ ! -f docker-compose.yml ]]; then
            echo "‚ùå docker-compose.yml not found"
            exit 1
          fi
          echo "‚úÖ docker-compose.yml found"

          # Security: Check for hardcoded passwords (should find NONE)
          if grep -r "defaultpass\|redisdefaultpassword" docker-compose.yml; then
            echo "‚ùå SECURITY VIOLATION: Hardcoded passwords found"
            exit 1
          fi
          echo "‚úÖ No hardcoded passwords found"

          # Check for insecure fallbacks
          if grep -q "defaultpass\|default.*pass" docker-compose.yml; then
            echo "‚ùå Insecure password fallbacks detected"
            exit 1
          fi
          echo "‚úÖ No insecure fallbacks found"

          # Validate fail-fast security pattern
          if grep -q "FATAL.*refusing to start" docker-compose.yml; then
            echo "‚úÖ Fail-fast security pattern implemented"
          else
            echo "‚ö†Ô∏è Fail-fast pattern not found"
          fi

          # Validate docker compose syntax
          docker compose -f docker-compose.yml config -q
          echo "‚úÖ Docker Compose syntax valid"

          # Check for :latest tags
          if grep -q ":latest" docker-compose.yml; then
            echo "‚ùå :latest tags detected - not recommended for production"
            exit 1
          fi
          echo "‚úÖ Specific version tags used"

      - name: üéØ Validation Summary
        run: |
          echo "üìä REDIS V2 SECURITY VALIDATION COMPLETE"
          echo "========================================"
          echo "‚úÖ Security: All hardcoded passwords eliminated"
          echo "‚úÖ Fail-fast: Secure startup pattern implemented"
          echo "‚úÖ Configuration: Docker Compose syntax valid"
          echo "‚úÖ Azure OIDC: Working correctly"
          echo "‚úÖ Ready for secure deployment"

  deploy-production:
    needs: validate-redis-v2
    runs-on: [srv649924, self-hosted, Linux, X64, conexao-de-sorte-redis-infraestrutura]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    env:
      DOCKER_NETWORK_NAME: conexao-network-swarm
      STACK_NAME: conexao-redis
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4.3.0

      - name: üîê Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üîë Get Key Vault secrets (Redis)
        id: kv
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ secrets.AZURE_KEYVAULT_NAME }}
          secrets: |
            conexao-de-sorte-redis-password

      - name: üîç Export and validate Redis password
        run: |
          set -euo pipefail
          secret="${{ steps.kv.outputs.conexao-de-sorte-redis-password }}"

          # üõ°Ô∏è FAIL-FAST: If can't retrieve secret, fail deployment
          if [[ -z "$secret" ]]; then
            echo "‚ùå CRITICAL: conexao-de-sorte-redis-password not found in Key Vault"
            echo "‚ùå Deployment aborted to prevent insecure password usage"
            exit 1
          fi

          # Mandatory masking
          echo "::add-mask::$secret"

          # Password strength validation
          if [[ ${#secret} -lt 8 ]]; then
            echo "‚ùå ERROR: Redis password too simple (minimum 8 characters)"
            exit 1
          fi

          # Secure export for Docker
          printf 'REDIS_PASSWORD=%s\n' "$secret" >> "$GITHUB_ENV"
          echo "‚úÖ Redis password validated and configured"

      - name: üê≥ Create Docker Secrets
        run: |
          set -euo pipefail

          echo "üîë Creating Docker Secret for Redis..."

          SECRET_NAME="conexao-de-sorte-redis-password"

          # Remove existing secret if exists
          if docker secret ls --format "{{.Name}}" | grep -q "^${SECRET_NAME}$"; then
            echo "üîÑ Removing existing secret..."
            docker secret rm "$SECRET_NAME" || true
            sleep 2
          fi

          # Create secret with Key Vault password
          echo "üìù Creating secret: $SECRET_NAME"
          echo "$REDIS_PASSWORD" | docker secret create "$SECRET_NAME" -
          echo "‚úÖ Secret created successfully"

      - name: üîß Ensure Docker Resources
        run: |
          set -euo pipefail

          echo "üîß Checking Docker resources..."

          # Check Redis volume
          if ! docker volume ls | grep -q "redis_data"; then
            echo "üìÅ Creating volume: redis_data"
            docker volume create redis_data
          else
            echo "‚úÖ Volume redis_data exists"
          fi

          # Check Swarm network
          if ! docker network ls | grep -q "conexao-network-swarm"; then
            echo "üåê Creating network: conexao-network-swarm"
            docker network create --driver overlay conexao-network-swarm
          else
            echo "‚úÖ Network conexao-network-swarm exists"
          fi

      - name: üßπ Cleanup and Deploy
        run: |
          set -euo pipefail

          echo "üßπ Preparing clean deployment..."

          STACK_NAME="conexao-redis"

          # Remove existing stack
          if docker stack ls | grep -q "$STACK_NAME"; then
            echo "üóëÔ∏è Removing existing stack: $STACK_NAME"
            docker stack rm "$STACK_NAME"

            # Wait for removal
            timeout=60
            elapsed=0
            while docker stack ls | grep -q "$STACK_NAME" && [ $elapsed -lt $timeout ]; do
              sleep 3
              elapsed=$((elapsed + 3))
              echo "‚è≥ Waiting for removal... ($elapsed/$timeout seconds)"
            done
          fi

          # Clean orphaned containers
          ORPHAN_CONTAINERS=$(docker ps -a --filter "name=redis" -q || true)
          if [[ -n "$ORPHAN_CONTAINERS" ]]; then
            echo "üßπ Removing orphaned Redis containers..."
            docker rm -f $ORPHAN_CONTAINERS || true
          fi

      - name: üöÄ Deploy Redis Infrastructure
        run: |
          set -euo pipefail

          echo "üöÄ Starting Redis deployment..."

          STACK_NAME="conexao-redis"

          # Deploy stack
          docker stack deploy -c docker-compose.yml $STACK_NAME

          echo "‚è≥ Waiting for services to become ready..."
          sleep 20

          # Check status with retry
          for i in {1..12}; do
            RUNNING=$(docker service ls --filter name="${STACK_NAME}_redis" --format "{{.Replicas}}" | grep -o '^[0-9]*' | head -1 || echo "0")
            TOTAL=$(docker service ls --filter name="${STACK_NAME}_redis" --format "{{.Replicas}}" | grep -o '/[0-9]*' | sed 's/\///' | head -1 || echo "0")

            if [[ $RUNNING -eq $TOTAL && $TOTAL -gt 0 ]]; then
              echo "‚úÖ Redis service ready: $RUNNING/$TOTAL"
              break
            fi

            if [[ $i -eq 12 ]]; then
              echo "‚ö†Ô∏è Timeout waiting for Redis - checking status..."
              docker service ls --filter name="${STACK_NAME}_redis"
              break
            fi

            echo "‚è≥ Waiting for Redis... ($RUNNING/$TOTAL) - attempt $i/12"
            sleep 10
          done

      - name: ü©∫ Redis Health Check
        run: |
          set -euo pipefail

          echo "ü©∫ Validating Redis health..."

          # Wait for complete initialization
          sleep 15

          REDIS_CONTAINER=$(docker ps --filter "name=redis" --format "{{.ID}}" | head -1 || true)

          if [[ -n "$REDIS_CONTAINER" ]]; then
            echo "‚úÖ Redis container found: $REDIS_CONTAINER"

            # Test 1: Check Redis process
            if docker exec "$REDIS_CONTAINER" ps aux | grep -q "[r]edis-server"; then
              echo "‚úÖ Redis process running"
            else
              echo "‚ùå Redis process not found"
              exit 1
            fi

            # Test 2: Check port 6379
            if docker exec "$REDIS_CONTAINER" netstat -tlnp 2>/dev/null | grep -q ":6379"; then
              echo "‚úÖ Port 6379 listening"
            else
              echo "‚ùå Port 6379 not available"
              exit 1
            fi

            # Test 3: Ping with authentication
            echo "üîç Testing Redis connectivity with auth..."
            if docker exec "$REDIS_CONTAINER" redis-cli --no-auth-warning -a "$REDIS_PASSWORD" ping | grep -q "PONG"; then
              echo "‚úÖ Redis responding to authenticated ping"
            else
              echo "‚ùå Redis not responding to authenticated ping"
              exit 1
            fi

            echo "üéâ Redis health check complete!"

          else
            echo "‚ùå Redis container not found"
            exit 1
          fi

      - name: üìä Final Status Report
        if: always()
        run: |
          set -euo pipefail

          echo "üìä FINAL REDIS DEPLOYMENT REPORT"
          echo "================================="

          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Status: SUCCESS"
            echo "üéâ Redis V2 Infrastructure secure deployment completed!"
            echo ""
            echo "üîó Commit: ${{ github.sha }}"
            echo "üë§ Author: ${{ github.actor }}"
            echo "üåø Branch: ${{ github.ref_name }}"
            echo ""
            echo "üîí Security: No insecure fallbacks, fail-fast implemented"
            echo "üîë Authentication: Key Vault integrated"
            echo "‚úÖ Health checks: All passed"
            echo "‚úÖ FASE 1 V2: Redis deployment successful"
          else
            echo "‚ùå Status: FAILURE"
            echo "üö® Deployment failed - check logs above"
            echo ""
            echo "üîß For debugging:"
            echo "  1. Check logs: docker service logs conexao-redis_redis"
            echo "  2. Check status: docker stack services conexao-redis"
            echo "  3. Check secrets: docker secret ls"
          fi