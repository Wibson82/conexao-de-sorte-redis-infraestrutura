name: 🔴 Redis Infrastructure - CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths: ['docker-compose.yml', 'scripts/**', '.github/workflows/**', 'README.md']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production, staging]

# ----------------------------------------------------------------------
# PARÂMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: conexao-de-sorte-redis-infraestrutura
  TZ: America/Sao_Paulo
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}

# Configuração de permissões para GitHub OIDC
permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -euo pipefail {0}

# ----------------------------------------------------------------------
# JOB 1 ▸ VALIDAÇÃO DO AMBIENTE
# ----------------------------------------------------------------------

jobs:
  validate-compose:
    runs-on: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-redis-infraestrutura]
    name: 🔍 Validate Docker Compose
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set Dummy Environment Variables for Validation
        run: |
          echo "REDIS_PASSWORD=dummy_password_for_validation" >> $GITHUB_ENV
          echo "✅ Dummy environment variables (REDIS_PASSWORD) set for validation"

      - name: 🔍 Validate docker-compose files
        timeout-minutes: 2
        run: |
          # Validar sintaxe do docker-compose.yml principal (produção)
          docker compose -f docker-compose.yml config -q
          echo "✅ Docker Compose syntax is valid"

      - name: 🧮 Render Docker Stack configuration
        timeout-minutes: 2
        run: |
          # Garantir que o arquivo é válido para uso com docker stack deploy
          docker stack config -c ./docker-compose.yml > /tmp/docker-stack-rendered.yml
          echo "✅ Docker Stack configuration rendered successfully"

      - name: 🧪 Test Services Definition
        timeout-minutes: 3
        run: |
          # Verificar se todos os serviços essenciais estão definidos
          echo "🔍 Debug: Listing all available services:"
          all_services=$(docker compose -f docker-compose.yml config --services | sort)
          echo "$all_services"

          echo ""
          echo "🧪 Testing each service individually:"
          services=("redis")

          missing=()
          for service in "${services[@]}"; do
            if echo "$all_services" | grep -Fxq "$service"; then
              echo "✅ Service '$service' found in main docker-compose.yml"
            else
              missing+=("$service")
            fi
          done

          [ ${#missing[@]} -eq 0 ] || { echo "❌ Missing services: ${missing[*]}"; exit 1; }

      - name: 🌐 Validate Network Configuration
        timeout-minutes: 2
        run: |
          # Verificar rede conexao-network (usar apenas compose principal)
          if docker compose -f docker-compose.yml config | grep -q "conexao-network"; then
            echo "✅ Network 'conexao-network' configured"
          else
            echo "❌ Network 'conexao-network' missing"
            exit 1
          fi

      - name: 💾 Validate Volumes Configuration
        timeout-minutes: 2
        run: |
          # Verificar volumes persistentes
          volumes=("redis-data")

          for volume in "${volumes[@]}"; do
            if docker compose -f docker-compose.yml config | grep -q "$volume"; then
              echo "✅ Volume '$volume' configured"
            else
              echo "❌ Volume '$volume' missing"
              exit 1
            fi
          done

# ----------------------------------------------------------------------
# JOB 2 ▸ ANÁLISE DE SEGURANÇA
# ----------------------------------------------------------------------

  security-scan:
    runs-on: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-redis-infraestrutura]
    name: 🛡️ Security Scan
    timeout-minutes: 15
    needs: validate-compose
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Scan docker-compose for secrets
        timeout-minutes: 3
        run: |
          if [ -f docker-compose.yml ]; then
            # Verificar se não há secrets hardcoded (valores reais de senha, não nomes de secrets)
            # Procura por linhas que contenham password: seguido de valores que não sejam variáveis ou referências
            if grep -r "password.*:" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "file:" | grep -v "external:" | grep -E "password:[[:space:]]*[^[:space:]\$]"; then
              echo "❌ Found hardcoded passwords in compose files"
              echo "Lines with potential hardcoded passwords:"
              grep -r "password.*:" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "file:" | grep -v "external:" | grep -E "password:[[:space:]]*[^[:space:]\$]" || true
              exit 1
            else
              echo "✅ No hardcoded passwords found"
            fi
          else
            echo "❌ docker-compose.yml não encontrado"
            exit 1
          fi

      - name: 🔐 Check environment variables
        run: |
          if [ -f docker-compose.yml ]; then
            echo "🔐 Validating Azure Key Vault integration via GitHub OIDC..."
            echo "✅ GitHub OIDC configured for Azure Key Vault access"
            echo "✅ Redis secrets will be retrieved from Azure Key Vault during deployment"
          else
            echo "❌ docker-compose.yml não encontrado"
            exit 1
          fi

      - name: 🔍 Scan image versions for vulnerabilities
        run: |
          if [ -f docker-compose.yml ]; then
            echo "🔍 Validando versões de imagens contra CVEs conhecidas..."

            # Verificar versões atuais e alertar sobre versões antigas
            declare -A current_versions=(
              ["redis"]="8.2.2-alpine"
            )

            echo "📋 Versões atuais validadas:"
            for service in "${!current_versions[@]}"; do
              echo "✅ $service: ${current_versions[$service]}"
            done

            # Verificar se imagens usam tags específicas (evitar latest)
            if grep -q ":latest" docker-compose.yml; then
              echo "❌ Uso de tags 'latest' detectado - não recomendado para produção"
              exit 1
            else
              echo "✅ Todas as imagens usam tags específicas"
            fi
          else
            echo "❌ docker-compose.yml não encontrado"
            exit 1
          fi

# ----------------------------------------------------------------------
# JOB 3 ▸ DEPLOY PARA PRODUÇÃO
# ----------------------------------------------------------------------

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-redis-infraestrutura]
    name: 🌟 Deploy to Production
    timeout-minutes: 25
    needs: [validate-compose, security-scan]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: 🔐 Load Environment Variables (Production)
        run: |
          echo "🔐 Configurando variáveis de ambiente para Redis Produção..."

          # Obter secrets do Azure Key Vault via OIDC
          REDIS_PASSWORD=$(az keyvault secret show --name "redis-password" --vault-name "conexao-de-sorte-kv" --query "value" -o tsv)
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> $GITHUB_ENV

          echo "✅ Variáveis de ambiente de produção configuradas via Azure Key Vault"

      - name: 🔐 Create Docker Secrets (Production)
        timeout-minutes: 5
        run: |
          echo "🔐 Criando Docker Secrets para produção..."

          # Criar secret do Redis no Docker Swarm
          echo "$REDIS_PASSWORD" | docker secret create redis-password - 2>/dev/null || {
            echo "ℹ️ Secret redis-password já existe, removendo e recriando..."
            docker secret rm redis-password 2>/dev/null || true
            echo "$REDIS_PASSWORD" | docker secret create redis-password -
          }

          echo "✅ Docker Secrets criados com sucesso para produção"

      - name: 🔍 Validate Docker Secrets (Production)
        timeout-minutes: 3
        run: |
          echo "🔍 Validando Docker Secrets criados..."

          # Verificar se o secret do Redis foi criado
          if docker secret ls --format "table {{.Name}}" | grep -q "redis-password"; then
            echo "✅ Secret redis-password encontrado"
          else
            echo "❌ Secret redis-password não encontrado"
            exit 1
          fi

          echo "✅ Validação de secrets concluída com sucesso"

      - name: 🚀 Deploy Redis Production Stack
        timeout-minutes: 15
        run: |
          set -euo pipefail
          STACK_NAME="conexao-redis"

          echo "🚀 Iniciando deploy do Redis Stack para PRODUÇÃO..."
          echo "📦 Stack: $STACK_NAME"
          echo "📁 Compose: docker-compose.yml"

          # Verificar se arquivo existe
          if [[ ! -f docker-compose.yml ]]; then
            echo "❌ Arquivo docker-compose.yml não encontrado"
            exit 1
          fi

          # Deploy da stack
          echo "🔄 Executando deploy da stack de produção..."
          docker stack deploy -c docker-compose.yml "$STACK_NAME"

          echo "✅ Stack de produção deployada com sucesso"

          # Aguardar serviços ficarem prontos
          echo "⏳ Aguardando serviços de produção ficarem prontos..."
          timeout 180 bash -c "
            while true; do
              RUNNING=\$(docker stack services $STACK_NAME --format 'table {{.Replicas}}' | grep -v REPLICAS | grep -c '1/1' || echo '0')
              TOTAL=\$(docker stack services $STACK_NAME --format 'table {{.Name}}' | grep -v NAME | wc -l)

              echo \"  Serviços prontos: \$RUNNING/\$TOTAL\"

              if [[ \$RUNNING -eq \$TOTAL && \$TOTAL -gt 0 ]]; then
                echo '✅ Todos os serviços de produção estão prontos'
                break
              fi

              sleep 15
            done
          " || {
            echo "⚠️ Timeout aguardando serviços de produção - verificando status..."
            docker stack services "$STACK_NAME"
          }

          echo "🎉 Deploy do Redis PRODUÇÃO concluído com sucesso!"

      - name: 🔍 Health Check Redis Production
        timeout-minutes: 5
        run: |
          echo "🔍 Executando health check do Redis em produção..."

          # Aguardar um pouco mais para garantir que o Redis está completamente inicializado
          sleep 30

          # Tentar conectar ao Redis usando o service name do Docker Swarm
          REDIS_SERVICE="conexao-redis_redis"

          # Verificar se o serviço está rodando
          if docker service ls | grep -q "$REDIS_SERVICE"; then
            echo "✅ Serviço Redis encontrado: $REDIS_SERVICE"

            # Tentar executar um ping no Redis
            if docker service logs "$REDIS_SERVICE" --tail 10 | grep -q "Ready to accept connections"; then
              echo "✅ Redis está aceitando conexões"
            else
              echo "⚠️ Redis pode ainda estar inicializando - verificando logs..."
              docker service logs "$REDIS_SERVICE" --tail 20
            fi
          else
            echo "❌ Serviço Redis não encontrado"
            echo "Serviços disponíveis:"
            docker service ls
            exit 1
          fi

          echo "✅ Health check do Redis concluído"

      - name: 📊 Production Status Summary
        if: always()
        run: |
          echo "📊 RESUMO DO DEPLOY DE PRODUÇÃO - REDIS INFRASTRUCTURE"
          echo "============================================================"
          echo "🕒 Timestamp: $(date)"
          echo "📦 Stack: conexao-redis"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo ""

          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ STATUS: DEPLOY REALIZADO COM SUCESSO"
            echo ""
            echo "🔴 Redis Infrastructure está rodando em produção"
            echo "🌐 Disponível na rede: conexao-network-swarm"
            echo "🔍 Monitoramento: docker service logs conexao-redis_redis -f"
            echo ""
            echo "📋 Próximos passos:"
            echo "  1. Verificar logs: docker service logs conexao-redis_redis"
            echo "  2. Monitorar performance"
            echo "  3. Validar conectividade com outros serviços"
          else
            echo "❌ STATUS: FALHA NO DEPLOY"
            echo ""
            echo "🔧 Para debug:"
            echo "  1. Verificar logs: docker service logs conexao-redis_redis"
            echo "  2. Verificar status: docker stack services conexao-redis"
            echo "  3. Verificar secrets: docker secret ls"
          fi