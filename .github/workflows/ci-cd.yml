name: 🔴 Redis Infrastructure - CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths: ['docker-compose.yml', 'scripts/**', '.github/workflows/**', 'README.md']
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [production, staging]

# ----------------------------------------------------------------------
# PARÂMETROS GERAIS
# ----------------------------------------------------------------------

env:
  SERVICE_NAME: conexao-de-sorte-redis-infraestrutura
  TZ: America/Sao_Paulo
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}

# Configuração de permissões para GitHub OIDC
permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -euo pipefail {0}

# ----------------------------------------------------------------------
# JOB 1 ▸ VALIDAÇÃO (GITHUB-HOSTED) - IGUAL AO TRAEFIK
# ----------------------------------------------------------------------

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    name: 🔍 Validate & Build
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Validate docker-compose files
        timeout-minutes: 3
        run: |
          # Validação simples de sintaxe YAML (sem Docker)
          echo "🔍 Validando sintaxe YAML do docker-compose.yml..."

          # Verificar se arquivo existe
          if [[ ! -f docker-compose.yml ]]; then
            echo "❌ Arquivo docker-compose.yml não encontrado"
            exit 1
          fi

          # Validação básica de sintaxe YAML usando Python
          python3 -c "
          import yaml
          import sys
          try:
              with open('docker-compose.yml', 'r') as f:
                  yaml.safe_load(f)
              print('✅ YAML syntax is valid')
          except yaml.YAMLError as e:
              print(f'❌ YAML syntax error: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Error reading file: {e}')
              sys.exit(1)
          "

          # Verificações básicas de estrutura
          echo "🔍 Verificando estrutura básica..."

          if grep -q "services:" docker-compose.yml; then
            echo "✅ Seção 'services' encontrada"
          else
            echo "❌ Seção 'services' não encontrada"
            exit 1
          fi

          if grep -q "redis:" docker-compose.yml; then
            echo "✅ Serviço 'redis' encontrado"
          else
            echo "❌ Serviço 'redis' não encontrado"
            exit 1
          fi

          echo "✅ Validação simplificada concluída com sucesso"

      - name: 🧪 Basic Structure Validation
        timeout-minutes: 1
        run: |
          echo "🔍 Verificando estrutura de serviços..."

          # Verificar se serviço redis está definido
          if grep -A 5 "^  redis:" docker-compose.yml | grep -q "image:"; then
            echo "✅ Serviço Redis com imagem definida"
          else
            echo "❌ Serviço Redis mal configurado"
            exit 1
          fi

          # Verificar se secrets estão definidos
          if grep -q "secrets:" docker-compose.yml; then
            echo "✅ Seção secrets encontrada"
          else
            echo "❌ Seção secrets não encontrada"
            exit 1
          fi

          echo "✅ Estrutura básica validada"

      - name: 🛡️ Security Scan
        timeout-minutes: 3
        run: |
          if [ -f docker-compose.yml ]; then
            # Verificar se não há secrets hardcoded
            if grep -r "password.*:" docker-compose.yml | grep -v "\${" | grep -v "#" | grep -v "file:" | grep -v "external:" | grep -E "password:[[:space:]]*[^[:space:]\$]"; then
              echo "❌ Found hardcoded passwords in compose files"
              exit 1
            else
              echo "✅ No hardcoded passwords found"
            fi

            # Verificar se imagens usam tags específicas (evitar latest)
            if grep -q ":latest" docker-compose.yml; then
              echo "❌ Uso de tags 'latest' detectado - não recomendado para produção"
              exit 1
            else
              echo "✅ Todas as imagens usam tags específicas"
            fi
          else
            echo "❌ docker-compose.yml não encontrado"
            exit 1
          fi

# ----------------------------------------------------------------------
# JOB 2 ▸ DEPLOY (SELF-HOSTED) - IGUAL AO TRAEFIK
# ----------------------------------------------------------------------

  deploy-production:
    needs: validate-and-build
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Production (GitHub Runner - Emergency Mode)
    timeout-minutes: 25
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: 🔑 Load Redis Secrets from Azure Key Vault
        run: |
          echo "🔐 Carregando secrets do Redis do Azure Key Vault..."

          # Secrets existentes no Azure Key Vault
          REDIS_PASSWORD=$(az keyvault secret show --name "conexao-de-sorte-redis-password" --vault-name "${{ env.AZURE_KEYVAULT_NAME }}" --query "value" -o tsv)
          REDIS_DATABASE=$(az keyvault secret show --name "conexao-de-sorte-redis-database" --vault-name "${{ env.AZURE_KEYVAULT_NAME }}" --query "value" -o tsv)

          # Configurações fixas para Redis (não são secrets)
          REDIS_HOST="redis"  # Nome do serviço Docker
          REDIS_PORT="6379"   # Porta padrão Redis

          # Mascarar apenas secrets reais nos logs para segurança
          echo "::add-mask::$REDIS_PASSWORD"
          echo "::add-mask::$REDIS_DATABASE"

          # Adicionar ao ambiente sem expor nos logs
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> $GITHUB_ENV
          echo "REDIS_HOST=$REDIS_HOST" >> $GITHUB_ENV
          echo "REDIS_PORT=$REDIS_PORT" >> $GITHUB_ENV
          echo "REDIS_DATABASE=$REDIS_DATABASE" >> $GITHUB_ENV
          echo "✅ Redis secrets carregados do Azure Key Vault (password, database)"
          echo "✅ Redis configurações definidas (host: $REDIS_HOST, port: $REDIS_PORT)"

      - name: 🔐 Create Docker Secrets (Production)
        timeout-minutes: 5
        run: |
          echo "🔐 Criando Docker Secrets para produção..."

          # Criar secret do Redis no Docker Swarm
          echo "$REDIS_PASSWORD" | docker secret create conexao-de-sorte-redis-password - 2>/dev/null || {
            echo "ℹ️ Secret conexao-de-sorte-redis-password já existe, removendo e recriando..."
            docker secret rm conexao-de-sorte-redis-password 2>/dev/null || true
            echo "$REDIS_PASSWORD" | docker secret create conexao-de-sorte-redis-password -
          }

          echo "✅ Docker Secrets criados com sucesso para produção"

      - name: 🔍 Validate Docker Secrets (Production)
        timeout-minutes: 3
        run: |
          echo "🔍 Validando Docker Secrets criados..."

          # Verificar se o secret do Redis foi criado
          if docker secret ls --format "table {{.Name}}" | grep -q "conexao-de-sorte-redis-password"; then
            echo "✅ Secret conexao-de-sorte-redis-password encontrado"
          else
            echo "❌ Secret conexao-de-sorte-redis-password não encontrado"
            exit 1
          fi

          echo "✅ Validação de secrets concluída com sucesso"

      - name: 🚀 Deploy Redis Production Stack (Emergency Mode)
        timeout-minutes: 15
        run: |
          echo "🚨 MODO DE EMERGÊNCIA: Runner self-hosted indisponível"
          echo "📋 Configurações preparadas para deploy remoto:"
          echo "📦 Stack: conexao-redis"
          echo "📁 Compose: docker-compose.yml"
          echo "🔐 Secrets: conexao-de-sorte-redis-password"
          echo ""
          echo "✅ VALIDAÇÃO COMPLETA:"
          echo "  - docker-compose.yml validado"
          echo "  - Azure Key Vault integrado"
          echo "  - Secrets mascarados"
          echo "  - Configuração Docker Swarm pronta"
          echo ""
          echo "⚠️ Para executar deploy real:"
          echo "  1. Conectar runner self-hosted: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-redis-infraestrutura]"
          echo "  2. ou executar manualmente:"
          echo "     docker stack deploy -c docker-compose.yml conexao-redis"
          echo ""
          echo "🎯 Pipeline preparado para execução quando runner estiver disponível"

      - name: 🔍 Health Check Redis Production (Emergency Mode)
        timeout-minutes: 5
        run: |
          echo "🔍 Health Check preparado para execução remota..."
          echo ""
          echo "🎯 Comandos de health check prontos:"
          echo "  docker service ls | grep conexao-redis_redis"
          echo "  docker service logs conexao-redis_redis --tail 10"
          echo ""
          echo "✅ Aguardando runner self-hosted para execução real"

      - name: 📊 Production Status Summary (Emergency Mode)
        if: always()
        run: |
          echo "📊 RESUMO MODO EMERGÊNCIA - REDIS INFRASTRUCTURE"
          echo "============================================================"
          echo "🕒 Timestamp: $(date)"
          echo "📦 Stack: conexao-redis (preparado)"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo ""
          echo "🚨 STATUS: RUNNER SELF-HOSTED INDISPONÍVEL"
          echo ""
          echo "✅ CONFIGURAÇÕES VALIDADAS:"
          echo "  - docker-compose.yml para Docker Swarm ✅"
          echo "  - Azure Key Vault secrets integrados ✅"
          echo "  - Secrets mascarados nos logs ✅"
          echo "  - Validação YAML sem Docker ✅"
          echo ""
          echo "⚠️ PRÓXIMOS PASSOS:"
          echo "  1. Verificar conexão runner: [self-hosted, Linux, X64, srv649924, conexao, conexao-de-sorte-redis-infraestrutura]"
          echo "  2. Executar deploy manual: docker stack deploy -c docker-compose.yml conexao-redis"
          echo "  3. Reativar workflow com runner funcionando"
          echo ""
          echo "🎯 Pipeline pronto para execução quando runner estiver disponível"